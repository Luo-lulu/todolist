{"version":3,"sources":["components/TodoForm.js","components/TodoItem.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleInputChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","justify","sm","md","type","placeholder","name","onChange","ref","TodoItem","todos","doneTodo","removeTodo","editTodo","setEdit","map","todo","index","isDone","align","onClick","TodoList","JSON","parse","localStorage","getItem","setTodos","setItem","stringify","test","newTodos","updatedTodos","removeArray","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06198ed7.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./project.css\";\nimport { Row, Col } from \"antd\";\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : \"\");\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n\n    setInput(\"\");\n  };\n\n  return (\n    <form className=\"todo__from\" onSubmit={handleSubmit}>\n      {props.edit ? (\n        <Row justify=\"center\">\n          <Col sm={20} md={16}>\n            <input\n              className=\"todo__edit\"\n              type=\"text\"\n              placeholder=\"Edit Todo\"\n              value={input}\n              name=\"text\"\n              onChange={handleInputChange}\n              ref={inputRef}\n            />\n            <button className=\"todo__edit__button\">Edit</button>\n          </Col>\n        </Row>\n      ) : (\n        <Row justify=\"center\">\n          <Col sm={20} md={16}>\n            <input\n              className=\"todo__input\"\n              type=\"text\"\n              placeholder=\"Add Todo\"\n              value={input}\n              name=\"text\"\n              onChange={handleInputChange}\n              ref={inputRef}\n            />\n            <button className=\"todo__button\">Add</button>\n          </Col>\n        </Row>\n      )}\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React, { useState } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\nimport { BiEditAlt } from \"react-icons/bi\";\nimport \"./project.css\";\nimport { Row, Col } from \"antd\";\nfunction TodoItem({ todos, doneTodo, removeTodo, editTodo }) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: \"\"\n  });\n\n  const submitEdit = value => {\n    editTodo(edit.id, value);\n    setEdit({\n      id: null,\n      value: \"\"\n    });\n  };\n\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitEdit} />;\n  }\n\n  return todos.map((todo, index) => (\n    <Row justify=\"center\">\n      <Col\n        sm={18}\n        md={12}\n        className={todo.isDone ? \"todo isdone\" : \"todo\"}\n        key={index}\n      >\n        <Row justify=\"space-between\" align=\"middle\">\n          <Col onClick={() => doneTodo(todo.id)} key={todo.id}>\n            {todo.text}\n          </Col>\n          <Col className=\"icons\">\n            <RiDeleteBin6Line\n              onClick={() => {\n                removeTodo(todo.id);\n              }}\n              className=\"delete__icon\"\n            />\n            <BiEditAlt\n              onClick={() => setEdit({ id: todo.id, value: todo.text })}\n              className=\"edit__icon\"\n            />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  ));\n}\n\nexport default TodoItem;\n","import React, { useState, useEffect } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport TodoItem from \"./TodoItem\";\nimport \"./project.css\";\nimport \"antd/dist/antd.css\";\n\nimport { Row, Col } from \"antd\";\nfunction TodoList() {\n  const [todos, setTodos] = useState(\n    JSON.parse(localStorage.getItem(\"TODOLOCAK\")) || []\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\"TODOLOCAK\", JSON.stringify(todos));\n  }, [todos]);\n  // console.log(JSON.parse(localStorage.getItem(\"TODOLOCAK\")));\n  const addTodo = todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n    const newTodos = [todo, ...todos];\n\n    setTodos(newTodos);\n  };\n\n  const editTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  };\n\n  const removeTodo = id => {\n    const removeArray = [...todos].filter(todo => todo.id !== id);\n    setTodos(removeArray);\n  };\n\n  const doneTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isDone = !todo.isDone;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <Row justify=\"center\">\n      <Col sm={20} md={16} className=\"todolist\">\n        <div className=\"title__text\">What's gonna do ?</div>\n        <TodoForm onSubmit={addTodo} />\n        <TodoItem\n          todos={todos}\n          doneTodo={doneTodo}\n          removeTodo={removeTodo}\n          editTodo={editTodo}\n        />\n      </Col>\n    </Row>\n  );\n}\n\nexport default TodoList;\n","import TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}